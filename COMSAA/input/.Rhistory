library(stringr) #needed to split columns in dataframe
library(dplyr)
################################################################################
############################# FUNCTIONS ########################################
################################################################################
# Trims leading white space
trim_leading <- function (x)  sub("^\\s+", "", x)
# Add leading white space
add_leading_spaces <- function (x, y){
length_of_asterisk <- nchar(x)
length_of_sequence <- y
leading_spaces <- paste(replicate(length_of_sequence - length_of_asterisk, " "), collapse = "")
new_string <- paste(leading_spaces, x)
new_string <- substr(new_string, 2, 61)
print(nchar(new_string))
return (new_string)
}
initialize_df <- function (number_of_strands, strand_names){
df <- data.frame(matrix(ncol = number_of_strands,
nrow = number_of_strands),
row.names = strand_names)
colnames(df) <- strand_names
return (df)
}
# Setting the directory
setwd('C:\\Users\\fejsa\\OneDrive\\Desktop\\Graduation project\\COMSAA\\input')
# Get all clustal files from the given directory
clustalFiles <- list.files(pattern='clustal')
clustalFiles
codingSequenceFiles <- list.files(pattern='csv')
codingSequenceFiles
# Read all .clustal files
data_frame_list <- lapply(clustalFiles, read.delim)
# Read all .csv files (for separating coding and noncoding)
coding_sequence_list <- lapply(codingSequenceFiles, read.csv)
### Using one .clustal file
first_df <- data_frame_list[[1]]
first_coding_sequence <- coding_sequence_list[[1]]
#Splitting rows on strands and sequences
first_df[c('strand', 'sequence')] <-
str_split_fixed(first_df$CLUSTAL.O.1.2.4..multiple.sequence.alignment, ' ', 2)
# Changing the name of the rows with only asterisks
first_df$strand[first_df$strand == ''] <- 'asterisk'
#drop first column that has everything combined
first_df_cleaned <- subset(first_df, select = -c(CLUSTAL.O.1.2.4..multiple.sequence.alignment))
#clean leading spaces
first_df_cleaned$sequence <- lapply(first_df_cleaned$sequence, trim_leading)
# calculate number of characters for each line,
# all except the last one should be of length 60
length_of_lines <-
lapply(first_df_cleaned[first_df_cleaned$strand=='sequence_1997',2],nchar)
length_of_sequence <- nchar(first_df_cleaned$sequence[1])
asterisk_only <- first_df_cleaned$sequence[first_df_cleaned$strand=='asterisk']
# Fixing the length of rows with asterisks
# All rows have the same length as the rows with sequences
first_df_cleaned$sequence[first_df_cleaned$strand=='asterisk'] <-
mapply (add_leading_spaces, asterisk_only, length_of_lines)
# groups sequences based on strand
# strands are now in one line
first_df_cleaned <- first_df_cleaned %>%
group_by(strand) %>%
summarise(sequence = paste(sequence, collapse = ""))
#indices with mutations
indices_with_mutations <-
which(strsplit(first_df_cleaned$sequence[1], "")[[1]] == " ")
#indices with no mutations
indices_without_mutations <-
which(strsplit(first_df_cleaned$sequence[1], "")[[1]] == "*")
# checking that all strands and "asterisk" have the same length
lapply(first_df_cleaned, nchar)
# extracting asterisk row
asterisk_df <- strsplit(first_df_cleaned$sequence[1], split='')
first_df_cleaned <- subset(first_df_cleaned,strand != "asterisk" )
first_strand <- strsplit(first_df_cleaned$sequence[1], split='')
mutated_strands <- first_df_cleaned[-c(1),]
summary_df
for (i in 1:nrow(mutated_strands)){ # iterate over mutated strands,
number_of_same_genes <- 0
print(substr(mutated_strands[i, 1], 1, 5))
print(substr(mutated_strands[i, 2], 1, 5))
second_strand <- strsplit(first_df_cleaned$sequence[i+1], split='') # second strand is the (i+1)th strand
for (j in seq(1, nchar(first_df_cleaned$sequence[1]))){ # iterate over all characters in a strand, all strands have same length
if(first_strand[[1]][j] == second_strand[[1]][j]){
number_of_same_genes <- number_of_same_genes + 1
}
}
print('strand end')
print(number_of_same_genes)
}
strand_names <- first_df_cleaned$strand
number_of_strands <- nrow(first_df_cleaned)
# percent identity matrix
MSA_similarity <- initialize_df(number_of_strands, strand_names)
# mutation number matrix
MSA_mutation_num <- initialize_df(number_of_strands, strand_names)
# transitions number matrix
MSA_transition_num <- initialize_df(number_of_strands, strand_names)
# transversions number matrix
MSA_transversion_num <- initialize_df(number_of_strands, strand_names)
# transition/transvertion ratio matrix
MSA_tt_ratio <- initialize_df(number_of_strands, strand_names)
# number of gaps matrix
MSA_gaps = initialize_df(number_of_strands, strand_names)
# number of insertions matrix
MSA_insertions <- initialize_df(number_of_strands, strand_names)
# number of deletions matrix
MSA_deletions <- initialize_df(number_of_strands, strand_names)
# Iterate over all strands
for (i in seq(1, number_of_strands)){
print(i)
sequence1 <- first_df_cleaned[i, 2]
length <- nchar(sequence1)
for (j in seq(1, number_of_strands)){
sequence2 <- first_df_cleaned[j, 2]
mutations <- 0
transitions <- 0
transversions <- 0
gaps <- 0
insertions <- 0
deletions <- 0
Ns <- 0
# iterate over all characters in a strand, all strands have same length
for (k in indices_with_mutations){
if (substr(sequence1, k, k) == 'N' || substr(sequence2, k, k) == 'N'){
Ns <- Ns + 1
}
if(substr(sequence1, k, k) != substr(sequence2, k, k)){
mutations <- mutations + 1
if (substr(sequence1, k, k) == '-'){
gaps <- gaps + 1
insertions <- insertions + 1
}
else if(substr(sequence2, k, k) == '-'){
gaps <- gaps + 1
deletions <- deletions + 1
}
else if ((substr(sequence1, k, k) == 'A' && substr(sequence2, k, k) == 'G') ||
(substr(sequence1, k, k) == 'G' && substr(sequence2, k, k) == 'A')){
transitions <- transitions + 1
}
else if ((substr(sequence1, k, k) == 'T' && substr(sequence2, k, k) == 'C') ||
(substr(sequence1, k, k) == 'C' && substr(sequence2, k, k) == 'T')){
transitions <- transitions + 1
}
else{
transversions <- transversions + 1
}
}
}
MSA_similarity[i, j] <- 1 - (mutations/length)
MSA_mutation_num[i, j] <- mutations
MSA_transition_num[i, j] <- transitions
MSA_transversion_num [i, j] <- transversions
if(transversions != 0){
MSA_tt_ratio[i, j] <- transitions/transversions
}
else{
MSA_tt_ratio[i, j] <- 0
}
MSA_gaps [i, j] <- gaps
MSA_insertions[i,j] <- insertions
MSA_deletions[i, j] <- deletions
}
}
################################################################################
############################ CODING SEQUENCE ###################################
################################################################################
start_end <- subset(first_coding_sequence, select = c('Start', 'Stop'))
start_end <- start_end[order(start_end$Start),]
# Creates sequence based on start and stop values
create_sequence <- function (start, end){
return (seq(start, end))
}
start_end$Sequences <- mapply(create_sequence, start_end$Start, start_end$Stop)
coding_sequence_index <- unique(start_end$Sequences)
coding_sequence_index <- c()
for (i in seq(1, nrow(start_end))){
coding_sequence_index <- append(coding_sequence_index, unlist(start_end[i, ]$Sequences))
}
coding_sequence_index <- unlist(coding_sequence_index)
coding_sequence_index <- unique(coding_sequence_index)
noncoding_sequence_index <- setdiff(seq(1, nchar(first_df_cleaned[1, 2])), coding_sequence_index)
# percent identity matrix
CDS_similarity <- initialize_df(number_of_strands, strand_names)
# mutation number matrix
CDS_mutation_num <- initialize_df(number_of_strands, strand_names)
# transitions number matrix
CDS_transition_num <- initialize_df(number_of_strands, strand_names)
# transversions number matrix
CDS_transversion_num <- initialize_df(number_of_strands, strand_names)
# transition/transvertion ratio matrix
CDS_tt_ratio <- initialize_df(number_of_strands, strand_names)
# number of gaps matrix
CDS_gaps = initialize_df(number_of_strands, strand_names)
# number of insertions matrix
CDS_insertions <- initialize_df(number_of_strands, strand_names)
# number of deletions matrix
CDS_deletions <- initialize_df(number_of_strands, strand_names)
for (i in seq(1, number_of_strands)){
print(i)
sequence1 <- first_df_cleaned[i, 2]
length <- nchar(sequence1)
for (j in seq(1, number_of_strands)){
sequence2 <- first_df_cleaned[j, 2]
mutations <- 0
transitions <- 0
transversions <- 0
gaps <- 0
insertions <- 0
deletions <- 0
Ns <- 0
# iterate over all characters in a strand, all strands have same length
for (k in coding_sequence_index){
if (!(k %in% indices_with_mutations)){
next
}
if (substr(sequence1, k, k) == 'N' || substr(sequence2, k, k) == 'N'){
Ns <- Ns + 1
}
if(substr(sequence1, k, k) != substr(sequence2, k, k)){
mutations <- mutations + 1
if (substr(sequence1, k, k) == '-'){
gaps <- gaps + 1
insertions <- insertions + 1
}
else if(substr(sequence2, k, k) == '-'){
gaps <- gaps + 1
deletions <- deletions + 1
}
else if ((substr(sequence1, k, k) == 'A' && substr(sequence2, k, k) == 'G') ||
(substr(sequence1, k, k) == 'G' && substr(sequence2, k, k) == 'A')){
transitions <- transitions + 1
}
else if ((substr(sequence1, k, k) == 'T' && substr(sequence2, k, k) == 'C') ||
(substr(sequence1, k, k) == 'C' && substr(sequence2, k, k) == 'T')){
transitions <- transitions + 1
}
else{
transversions <- transversions + 1
}
}
}
CDS_similarity[i, j] <- 1 - (mutations/length)
CDS_mutation_num[i, j] <- mutations
CDS_transition_num[i, j] <- transitions
CDS_transversion_num [i, j] <- transversions
if(transversions != 0){
CDS_tt_ratio[i, j] <- transitions/transversions
}
else{
CDS_tt_ratio[i, j] <- 0
}
CDS_gaps [i, j] <- gaps
CDS_insertions[i,j] <- insertions
CDS_deletions[i, j] <- deletions
}
}
################################################################################
############################ NON CODING SEQUECE ################################
################################################################################
# percent identity matrix
nonCDS_similarity <- initialize_df(number_of_strands, strand_names)
# mutation number matrix
nonCDS_mutation_num <- initialize_df(number_of_strands, strand_names)
# transitions number matrix
nonCDS_transition_num <- initialize_df(number_of_strands, strand_names)
# transversions number matrix
nonCDS_transversion_num <- initialize_df(number_of_strands, strand_names)
# transition/transvertion ratio matrix
nonCDS_tt_ratio <- initialize_df(number_of_strands, strand_names)
# number of gaps matrix
nonCDS_gaps = initialize_df(number_of_strands, strand_names)
# number of insertions matrix
nonCDS_insertions <- initialize_df(number_of_strands, strand_names)
# number of deletions matrix
nonCDS_deletions <- initialize_df(number_of_strands, strand_names)
for (i in seq(1, number_of_strands)){
print(i)
sequence1 <- first_df_cleaned[i, 2]
length <- nchar(sequence1)
for (j in seq(1, number_of_strands)){
sequence2 <- first_df_cleaned[j, 2]
mutations <- 0
transitions <- 0
transversions <- 0
gaps <- 0
insertions <- 0
deletions <- 0
Ns <- 0
# iterate over all characters in a strand, all strands have same length
for (k in noncoding_sequence_index){
if(!(k %in% indices_with_mutations))
if (substr(sequence1, k, k) == 'N' || substr(sequence2, k, k) == 'N'){
Ns <- Ns + 1
}
if(substr(sequence1, k, k) != substr(sequence2, k, k)){
mutations <- mutations + 1
if (substr(sequence1, k, k) == '-'){
gaps <- gaps + 1
insertions <- insertions + 1
}
else if(substr(sequence2, k, k) == '-'){
gaps <- gaps + 1
deletions <- deletions + 1
}
else if ((substr(sequence1, k, k) == 'A' && substr(sequence2, k, k) == 'G') ||
(substr(sequence1, k, k) == 'G' && substr(sequence2, k, k) == 'A')){
transitions <- transitions + 1
}
else if ((substr(sequence1, k, k) == 'T' && substr(sequence2, k, k) == 'C') ||
(substr(sequence1, k, k) == 'C' && substr(sequence2, k, k) == 'T')){
transitions <- transitions + 1
}
else{
transversions <- transversions + 1
}
}
}
nonCDS_similarity[i, j] <- 1 - (mutations/length)
nonCDS_mutation_num[i, j] <- mutations
nonCDS_transition_num[i, j] <- transitions
nonCDS_transversion_num [i, j] <- transversions
if(transversions != 0){
nonCDS_tt_ratio[i, j] <- transitions/transversions
}
else{
nonCDS_tt_ratio[i, j] <- 0
}
nonCDS_gaps [i, j] <- gaps
nonCDS_insertions[i,j] <- insertions
nonCDS_deletions[i, j] <- deletions
}
}
View(nonCDS_insertions)
for (i in noncoding_sequence_index){
print(substr(first_df_cleaned[1, 2], k, k))
}
View(nonCDS_insertions)
View(nonCDS_insertions)
for (i in noncoding_sequence_index){
print(i)
}
print(substr(first_df_cleaned[2,1]), 35650, 35664)
print(substr(first_df_cleaned[2,1], 35650, 35664))
first_df_cleaned[2,1]
print(substr(first_df_cleaned[1, 2], 35650, 35664))
print(substr(first_df_cleaned[1, 2], 35650, 35650))
print(substr(first_df_cleaned[1, 2], 35651, 35651))
print(substr(first_df_cleaned[1, 2], 35652, 35652))
print(substr(first_df_cleaned[1, 2], 35653, 35653))
print(substr(first_df_cleaned[1, 2], 35654, 35654))
print(substr(first_df_cleaned[1, 2], 35655, 35655))
print(substr(first_df_cleaned[1, 2], 35656, 35656))
print(substr(first_df_cleaned[1, 2], 35657, 35657))
print(substr(first_df_cleaned[1, 2], 35658, 35658))
print(substr(first_df_cleaned[1, 2], 35659, 35659))
print(substr(first_df_cleaned[1, 2], 35660, 35660))
print(substr(first_df_cleaned[1, 2], 35661, 35661))
print(substr(first_df_cleaned[1, 2], 35662, 35662))
print(substr(first_df_cleaned[1, 2], 35663, 35663))
print(substr(first_df_cleaned[1, 2], 35664, 35664))
length(coding_sequence_index)
"GGCACCTGTCCTTTGCCCTCGTCCCTTTTTCCTCATACCTTTTCTTTACAGCTTTTTTATACAGTTTTTTATAGAATTATGATATTGTTTCAATCAAATACCACTAACACTATCAATGTGCAGACTACTTTAAATCATGACGATC-TTTTTTTTTTCTTTTACAGTATGGTGAACATCAATC-----------------------------AAATTAATAAAAAATTACTTACTTGAAATCAGCAATAAGGTCTCTGTTGAAATTTTCTCCCAGCAGCACCTCGCTTCCCTCTTCCCAACTCTGGTATTCTAAACCCCGTTCAGCGGCATACTTTCTCCATACTTTAAAGGGGATGTCAAATTTTAGCTCCTCTCCTGTACCCACGATCTTCATGTCTTTCTTCCCAG----------------------------------------------------------------------------------------------------------------AAAATAAAGTTTAAGTGTTTTTATTTAA---AACTGTTAGTTTTGAATTAGTCTGCAAAATAAAAGAAACAAGCGGGCTTACCAGGCAAAGTACAGCGGGCGCACAAAGCACAAGCTCTAAAGAAGCTCTAAAGACACTCTCCAACCTCTCCACAATATATACACAAGCCCTAAACTGACGTAATGGGAGTAAAGTGAAAAAAAAATACCGCCAAGCCCAACACACACCCCGAAACTGCGTCAGCAGGAAAAAGTACAGTTTCACTTCCGCATTCCCAACAAGCGTAACTTCCTCTTTCTCATGGTACGTCACATCCGATTAACTTGTAACGTCATTTTCCCACGGTCGCGCCGCCCCTTTTCGCCGTTCACCCCGCAGCCAATCACCACACAGCGCGCACTTTTTTAAATTACCTCATTTGCATGTTGGCACCATTCCATCTTTAAGGTATATTAT--------"
length("GGCACCTGTCCTTTGCCCTCGTCCCTTTTTCCTCATACCTTTTCTTTACAGCTTTTTTATACAGTTTTTTATAGAATTATGATATTGTTTCAATCAAATACCACTAACACTATCAATGTGCAGACTACTTTAAATCATGACGATC-TTTTTTTTTTCTTTTACAGTATGGTGAACATCAATC-----------------------------AAATTAATAAAAAATTACTTACTTGAAATCAGCAATAAGGTCTCTGTTGAAATTTTCTCCCAGCAGCACCTCGCTTCCCTCTTCCCAACTCTGGTATTCTAAACCCCGTTCAGCGGCATACTTTCTCCATACTTTAAAGGGGATGTCAAATTTTAGCTCCTCTCCTGTACCCACGATCTTCATGTCTTTCTTCCCAG----------------------------------------------------------------------------------------------------------------AAAATAAAGTTTAAGTGTTTTTATTTAA---AACTGTTAGTTTTGAATTAGTCTGCAAAATAAAAGAAACAAGCGGGCTTACCAGGCAAAGTACAGCGGGCGCACAAAGCACAAGCTCTAAAGAAGCTCTAAAGACACTCTCCAACCTCTCCACAATATATACACAAGCCCTAAACTGACGTAATGGGAGTAAAGTGAAAAAAAAATACCGCCAAGCCCAACACACACCCCGAAACTGCGTCAGCAGGAAAAAGTACAGTTTCACTTCCGCATTCCCAACAAGCGTAACTTCCTCTTTCTCATGGTACGTCACATCCGATTAACTTGTAACGTCATTTTCCCACGGTCGCGCCGCCCCTTTTCGCCGTTCACCCCGCAGCCAATCACCACACAGCGCGCACTTTTTTAAATTACCTCATTTGCATGTTGGCACCATTCCATCTTTAAGGTATATTAT--------")
nchar("GGCACCTGTCCTTTGCCCTCGTCCCTTTTTCCTCATACCTTTTCTTTACAGCTTTTTTATACAGTTTTTTATAGAATTATGATATTGTTTCAATCAAATACCACTAACACTATCAATGTGCAGACTACTTTAAATCATGACGATC-TTTTTTTTTTCTTTTACAGTATGGTGAACATCAATC-----------------------------AAATTAATAAAAAATTACTTACTTGAAATCAGCAATAAGGTCTCTGTTGAAATTTTCTCCCAGCAGCACCTCGCTTCCCTCTTCCCAACTCTGGTATTCTAAACCCCGTTCAGCGGCATACTTTCTCCATACTTTAAAGGGGATGTCAAATTTTAGCTCCTCTCCTGTACCCACGATCTTCATGTCTTTCTTCCCAG----------------------------------------------------------------------------------------------------------------AAAATAAAGTTTAAGTGTTTTTATTTAA---AACTGTTAGTTTTGAATTAGTCTGCAAAATAAAAGAAACAAGCGGGCTTACCAGGCAAAGTACAGCGGGCGCACAAAGCACAAGCTCTAAAGAAGCTCTAAAGACACTCTCCAACCTCTCCACAATATATACACAAGCCCTAAACTGACGTAATGGGAGTAAAGTGAAAAAAAAATACCGCCAAGCCCAACACACACCCCGAAACTGCGTCAGCAGGAAAAAGTACAGTTTCACTTCCGCATTCCCAACAAGCGTAACTTCCTCTTTCTCATGGTACGTCACATCCGATTAACTTGTAACGTCATTTTCCCACGGTCGCGCCGCCCCTTTTCGCCGTTCACCCCGCAGCCAATCACCACACAGCGCGCACTTTTTTAAATTACCTCATTTGCATGTTGGCACCATTCCATCTTTAAGGTATATTAT--------")
noncds_test <- "GGCACCTGTCCTTTGCCCTCGTCCCTTTTTCCTCATACCTTTTCTTTACAGCTTTTTTATACAGTTTTTTATAGAATTATGATATTGTTTCAATCAAATACCACTAACACTATCAATGTGCAGACTACTTTAAATCATGACGATC-TTTTTTTTTTCTTTTACAGTATGGTGAACATCAATC-----------------------------AAATTAATAAAAAATTACTTACTTGAAATCAGCAATAAGGTCTCTGTTGAAATTTTCTCCCAGCAGCACCTCGCTTCCCTCTTCCCAACTCTGGTATTCTAAACCCCGTTCAGCGGCATACTTTCTCCATACTTTAAAGGGGATGTCAAATTTTAGCTCCTCTCCTGTACCCACGATCTTCATGTCTTTCTTCCCAG----------------------------------------------------------------------------------------------------------------AAAATAAAGTTTAAGTGTTTTTATTTAA---AACTGTTAGTTTTGAATTAGTCTGCAAAATAAAAGAAACAAGCGGGCTTACCAGGCAAAGTACAGCGGGCGCACAAAGCACAAGCTCTAAAGAAGCTCTAAAGACACTCTCCAACCTCTCCACAATATATACACAAGCCCTAAACTGACGTAATGGGAGTAAAGTGAAAAAAAAATACCGCCAAGCCCAACACACACCCCGAAACTGCGTCAGCAGGAAAAAGTACAGTTTCACTTCCGCATTCCCAACAAGCGTAACTTCCTCTTTCTCATGGTACGTCACATCCGATTAACTTGTAACGTCATTTTCCCACGGTCGCGCCGCCCCTTTTCGCCGTTCACCCCGCAGCCAATCACCACACAGCGCGCACTTTTTTAAATTACCTCATTTGCATGTTGGCACCATTCCATCTTTAAGGTATATTAT--------"
noncoding_sequence_index
typeof(noncoding_sequence_index)
noncoding_sequence_index[1]
noncoding_sequence_index[3095]
3095-985
test <- noncoding_sequence_index[2110:3095]
length(test)
test <- noncoding_sequence_index[2109:3095]
test <- noncoding_sequence_index[2111:3095]
length(test)
length(test)
for(i in test){
print(i)
}
test1 <- ''
for(i in test){
test1 <- paste(test1, substr(first_df_cleaned[1, 2], i, i))
}
test
test1
tolower(test1) == tolower(noncds_test)
for(i in test){
test1 <- paste(test1, substr(first_df_cleaned[1, 2], i, i), sep='')
}
test1
test1
test1 <- ''
for(i in test){
test1 <- paste(test1, substr(first_df_cleaned[1, 2], i, i), sep='')
}
test1
tolower(test1) == tolower(noncds_test)
test1
noncds_test
for (i in noncoding_sequence_index){
print(i)
}
test1
good_portion<- "GGCTTACCAGGCAAAGTACAGCGGGCGCACAAAGCACAAGCTCTAAAGAAGCTCTAAAGACACTCTCCAACCTCTCCACAATATATACACAAGCCCTAAACTGACGTAATGGGAGTAAAGTGAAAAAAAAATACCGCCAAGCCCAACACACACCCCGAAACTGCGTCAGCAGGAAAAAGTACAGTTTCACTTCCGCATTCCCAACAAGCGTAACTTCCTCTTTCTCATGGTACGTCACATCCGATTAACTTGTAACGTCATTTTCCCACGGTCGCGCCGCCCCTTTTCGCCGTTCACCCCGCAGCCAATCACCACACAGCGCGCACTTTTTTAAATTACCTCATTTGCATGTTGGCACCATTCCATCTTTAAGGTATATTAT--------"
nchar(good_portion)
3095-390
substr(test1, 2700, 2710)
nchar(test1)
985-390
substr(test1, 590, 610)
substr(test1, 590, 590)
substr(test1, 591, 591)
substr(test1, 592, 592)
substr(test1, 592, 595)
substr(test1, 570, 590)
substr(test1, 570, 576)
substr(test1, 581, 581)
substr(test1, 583, 590)
test
test[590]
test[583:590]
first_df_cleaned[1,2]
first_df_cleaned[1,2][35262:32569]
substr(first_df_cleaned[1,2], 35262, 25269)
substr(first_df_cleaned[1,2], 35262, 25269)
substr(first_df_cleaned[1,2]$sequence, 35262, 25269)
substr(first_df_cleaned[1,2], 35262, 25269)
first_df_cleaned[1,2]
substr(first_df_cleaned[1,2], 35262, 35269)
35664 - 34997
first_df_cleaned[1, 2]
substr(first_df_cleaned[1,2], 34997, 35664)
nchar(substr(first_df_cleaned[1,2], 34997, 35664))
View(MSA_insertions)
