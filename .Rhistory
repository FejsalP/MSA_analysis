shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(indices_with_mutations)
runApp()
runApp()
runApp()
variables$reference_list
return (as.data.frame(reference_list))
runApp()
runApp()
group_by(theData, seven_day_index) %>%
summarise(median_earnings = median(earning))
View(theData)
library(dplyr)
theData <- data.frame(date = 1:10,
earning = c(-40, -88, -134, 66, -86, -1, 267, 65, 86, 64))
View(theData)
theData$seven_day_index <- c(0, rep(1:(nrow(theData)-1)%/%7))
View(theData)
group_by(theData, seven_day_index) %>%
summarise(median_earnings = median(earning))
View(theData)
library(dplyr)
theData <- data.frame(date = 1:10,
earning = c(-40, -88, -134, 66, -86, -1, 267, 65, 86, 64))
View(theData)
theData$seven_day_index <- c(0, rep(1:(nrow(theData)-1)%/%7))
View(theData)
group_by(theData, seven_day_index) %>%
summarise(median_earnings = median(earning))
View(theData)
group_by(theData, seven_day_index) %>%
summarise(median_earnings = sum(earning))
theData1 <- data.frame(date = 1:10,
earning = c(4, 4, 4, ,4 ,4 ,4 ,4 ,4, 7, 7))
theData1 <- data.frame(date = 1:10,
earning = c(4, 4, 4, 5,4 ,4 ,4 ,4 ,4, 7))
View(theData1)
theData1$three_day <- c(0, rep(1:(nrow(theData)-1)%/%3))
group_by(theData1, three_day) %>%
summarise(median_earnings = sum(earning))
theData1$grouped <- group_by(theData1, three_day) %>%
summarise(median_earnings = sum(earning))
theData2 <- group_by(theData1, three_day) %>%
summarise(median_earnings = sum(earning))
View(theData2)
runApp()
runApp()
runApp()
runApp()
runApp()
grouped_reference_list <- group_by(reference_list, group) %>%
summarise(number_of_mutations = sum(reference_list))
return (grouped_reference_list)
runApp()
runApp()
paste('text',1)
paste0('text',1)
runApp()
runApp()
for (i in seq(1, length(sequence)-1)){
range <- c()
if (sequence[i+1] - sequence [i] == 1){
print('AAAAAAA')
append(range,sequence[i])
next
}
if (i == length(sequence) - 1){
append(range, sequence[i+1])
}
count <- count + 1
print(range)
df[count, 1] <- range
}
View(df)
runApp()
runApp()
runApp()
print(paste('COUNT', count))
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
k <- c()
append(k, 3)
k
runApp()
k
k <- append(k, 3)
k
k <- append(k, 5)
k
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
coding_sequence_index
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rep('nonCDS', length(noncoding_sequence_starting_indices))
rep('nonCDS', length(7))
rep('nonCDS', 7)
paste0(rep('nonCDS', 7), seq(1, 7))
paste0(rep('nonCDS_', 7), seq(1, 7))
runApp()
runApp()
runApp()
runApp()
runApp()
sum(1,2,3,4)
seq(5:15)
seq(5:20)
x <- c(1,2,4,5,6,7,8,9)
x[1:5]
x[6:7]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
print(text_size)
runApp()
runApp()
View(values)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(values_df,
aes(x = reorder(Type, Count),
y = Number_of_mutations,
fill = color))+
geom_bar(stat='identity', position ='dodge') +
theme(axis.text.x = element_text(size = text_size),
axis.title=element_text(size=25,face="bold")) +
ggtitle(title)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(
values_df,
aes(x = reorder(Type, Count),
y = Number_of_mutations,
fill = group))+
geom_bar(stat='identity', position ='dodge') +
theme_classic() +
theme(axis.text.x = element_text(size = text_size),
axis.title.x = element_text(" "),
axis.title=element_text(size = 15,face = "bold")) +
ggtitle(title) +
ylab(y_axis_name)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(mutations_types, aes(x = Type, fill = Mutations)) +
geom_bar()
runApp()
ggplot(mutations_types, aes(x = Type, y = Mutations_count, fill = Mutations)) +
geom_bar()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
typeof('aaa')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
